# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
#   config.vm.box = "generic/ubuntu2204"
#   config.vm.box = "fasmat/ubuntu2204-desktop"
#   config.vm.box_version = "22.0509.1"
  config.vm.box = "tknerr/ubuntu2004-desktop"

  config.vm.synced_folder "../../CS6381-Distributed-Systems", "/CS6381-Distributed-Systems"

  config.vm.provider "vmware_workstation" do |v|

    v.gui = true

    # Set the VM name
    v.vmx["displayName"] = "vmw_vagrant_vm"
    # Customize the amount of memory on the VM:
    v.memory = "4096"

    # Set the number of virtual CPUs
    v.cpus = 4

    # Enable bidirectional copy-paste
    v.vmx["isolation.tools.paste.enabled"] = "TRUE"
    v.vmx["isolation.tools.paste.vClipboard.autoflush"] = "TRUE"
    v.vmx["isolation.tools.paste.vClipboard.enabled"] = "TRUE"
    v.vmx["isolation.tools.copy.disable"] = "FALSE"
    # Show the mini toolbar in full-screen/seamless mode
    v.vmx["gui.miniToolbarVisibility"] = "true"

    # Set the size of the hard disk (in GB) and configure it to grow dynamically
    v.vmx["ide0:0.size"] = "50"
    v.vmx["scsi0:0.mode"] = "independent-persistent"
    v.vmx["scsi0:0.present"] = "TRUE"

    # Set the hardware clock to UTC time
    v.vmx["time.synchronize.continue"] = "FALSE"
    v.vmx["time.synchronize.restore"] = "FALSE"
    v.vmx["time.synchronize.resume.disk"] = "FALSE"
    v.vmx["time.synchronize.shrink"] = "FALSE"
    v.vmx["time.synchronize.tools.enable"] = "FALSE"
    v.vmx["time.synchronize.tools.startup"] = "FALSE"
    v.vmx["time.synchronize.resume.host"] = "FALSE"
    v.vmx["rtc.diffFromUTC"] = 0

    # Enable I/O APIC, PAE/NX, and Nested Paging
    v.vmx["ioapic.enable"] = "TRUE"
#     v.vmx["vhv.enable"] = "TRUE"
    v.vmx["monitor.virtual_mmu"] = "hardware"
    v.vmx["monitor.virtual_exec"] = "hardware"

    # Enable audio output/input
    v.vmx["sound.present"] = "TRUE"
    v.vmx["sound.autodetect"] = "TRUE"
    v.vmx["sound.allowGuestConnectionControl"] = "TRUE"

    # Set up NAT-based connectivity for Network Adapter 1
    v.vmx["ethernet0.connectionType"] = "nat"
    v.vmx["ethernet0.pcislotnumber"] = "32"

#     # install VMware Tools
#     v.vmx["tools.upgrade.policy"] = "manual"
  end



  # install VMware Tools
#   config.vm.provision "shell", path: "install_vmware_tools.sh", privileged: true
#   config.vm.provision "shell", inline: <<-SHELL
#     sudo apt-get update
#     sudo apt-get install -y open-vm-tools-desktop
#   SHELL

#   config.vm.provision "shell", inline: <<-SHELL
#       sudo vmhgfs-fuse .host:/CS6381-Distributed-Systems /mnt/ -o allow_other -o uid=1000
#       sudo echo '.host:/CS6381-Distributed-Systems  /mnt/hgfs/    fuse.vmhgfs-fuse    defaults,allow_other,uid=1000     0    0' >> /etc/fstab
#       sudo mount -a
#     SHELL
#   config.vm.provision "shell", inline: <<-SHELL
#       if [ ! -d "/mnt/" ]; then
#         sudo mkdir /mnt/
#       fi
#       if [ ! -d "/mnt/hgfs/" ]; then
#         sudo mkdir /mnt/hgfs/
#       fi
#       sudo vmhgfs-fuse .host:/CS6381-Distributed-Systems /mnt/ -o allow_other -o uid=1000
#       sudo echo '.host:/CS6381-Distributed-Systems  /mnt/hgfs/    fuse.vmhgfs-fuse    defaults,allow_other,uid=1000     0    0' >> /etc/fstab
#       sudo mount -a
#     SHELL
  config.vm.provision :shell, path: "bootstrap.sh"

#   config.vm.post_up_message = "Rebooting VM..."
#   config.vm.provision "reload", trigger: :reload_guest
#
#   # Read the usernames from the password file (assuming one username per line)
#   # usernames=$(cat password_file)
#
#   config.vm.provision "shell", inline: <<-SHELL
#     # Add users to vboxsf group
#     while IFS=: read -r user password; do
#       sudo usermod -aG vboxsf $user
#     done < password_file
#   SHELL
#
#   # Reboot after the last provision
#   config.vm.provision "shell", inline: "sudo reboot", run: "once"
#
#   # Execute visudo after the reboot
#   config.vm.provision "shell", inline: "sudo visudo"
#
#   config.vm.provision "shell", inline: "echo '%password_file ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/vagrant"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.


  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
